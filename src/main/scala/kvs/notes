/**
 *:create_schema(node()) ok
 * create_tables(name, [att, info(record)]), add_table_index
 *:start ok
 *:stop ok
 *:destroy 
 *:join
 *:version
 *:dir 
 * info()-> processes, transactions, schema, etc.
 *:config
 * ---------
 *:containers
 *:create
 *:link
 *:add
 *:delete
 *:traversal
 *:entries
 *:put
 *:get
 *:all
 *:index
 *:next_id
 *:save_db
 *:load_db
 *:dump
 *-------
 *:id_sec
 *:last_disc  ^
 *:last_table ^
 *:update_cfg ^
 * store handlers
 * - same with modified data
 *
 * part of val serialization
 * https://github.com/twitter/bijection
 * scalaz tagged types
 * more shit from sz
 */

/**
 * sample flow to implement
 */

val u = kvs.get(user, User.id/email)

handler[Acl].check_access(User.id/email, (feature,login)) match {
  disabled => reject,blocked account
  _ => msg:notify[user,login,id/email,update_status] [ok]
}

- handlers should be imported by feed server and guarded with the supervisor.
- handlers should have the specific methods and this methods should be available in feed server workers.
