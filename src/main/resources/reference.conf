#
# Defaults for the KVS database.
#
kvs {
  # KVS storage
  # Backend storage engine of KVS abstract scala types storage.
  # mem       - for memory
  # fs        - for file system
  # sql       - for SQL
  # leveldb   - for leveldb
  # rng       - for RNG distributed consistent hash storage
  store = zd.kvs.store.Ring
}

######################################
#  rng application config file       #
######################################

ring {
  quorum = [1, 1, 1] // N, W, R
  buckets = 32768 // 2^15
  virtual-nodes = 128
  hash-length = 32
  # ring-timeout is bigger than gather-timeout
  ring-timeout = 11 seconds
  gather-timeout = 10 seconds
  dump-timeout = 1 hour
  repl-timeout = 1 minute
  leveldb {
    dir = "rng_data_"${akka.remote.netty.tcp.hostname}"_"${akka.remote.netty.tcp.port}
    fsync = false
  }
}

akka {
  loglevel = info
  loggers = [ akka.event.slf4j.Slf4jLogger ]
  logging-filter = akka.event.slf4j.Slf4jLoggingFilter
  logger-startup-timeout = 30s

  log-config-on-start = off

  jvm-exit-on-fatal-error = on

  actor {
    provider = cluster
    
    warn-about-java-serializer-usage = on
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    
    deployment {
      /ring_readonly_store {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
    
    debug {
      receive = off
      lifecycle = off
    }

    serializers {
      kvsproto = zd.kvs.Serializer
    }

    serialization-identifiers {
      "zd.kvs.Serializer" = 50
    }

    serialization-bindings {
      "zd.kvs.rng.model.ChangeState" = kvsproto
      "zd.kvs.rng.model.StoreGetAck" = kvsproto
      "zd.kvs.rng.model.StoreDelete" = kvsproto
      "zd.kvs.rng.model.StoreGet" = kvsproto
      "zd.kvs.rng.model.StorePut" = kvsproto
      "zd.kvs.rng.model.DumpBucketData" = kvsproto
      "zd.kvs.rng.model.DumpGetBucketData" = kvsproto
      "zd.kvs.rng.model.ReplBucketPut" = kvsproto
      "zd.kvs.rng.model.ReplBucketUpToDate" = kvsproto
      "zd.kvs.rng.model.ReplGetBucketIfNew" = kvsproto
      "zd.kvs.rng.model.ReplNewerBucketData" = kvsproto
    }
  }

  cluster {
    metrics.enabled = off
  }

  remote {
    netty.tcp {
      send-buffer-size = 30 megabytes
      receive-buffer-size = 30 megabytes
      maximum-frame-size = 30 megabytes
    }
  }
}
