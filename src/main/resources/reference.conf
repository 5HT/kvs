#
# Defaults for the KVS database.
#
kvs {
  # KVS storage
  # Backend storage engine of KVS abstract scala types storage.
  # mem       - for memory
  # fs        - for file system
  # sql       - for SQL
  # leveldb   - for leveldb
  # rng       - for RNG distributed consistent hash storage
  store = mws.kvs.store.Ring
}

######################################
#  rng application config file       #
######################################

ring {
  quorum = [1, 1, 1] // N, W, R
  buckets = 1024
  virtual-nodes = 128
  hashLength = 32
  gather-timeout = 3
  gather-timeout-replication = 15 minutes
  leveldb {
    dir = "rng_data_"${akka.remote.netty.tcp.hostname}"_"${akka.remote.netty.tcp.port}
    fsync = false
  }
}

akka {
  loglevel = info
  loggers = [ akka.event.slf4j.Slf4jLogger ]
  logging-filter = akka.event.slf4j.Slf4jLoggingFilter
  logger-startup-timeout = 30s

  log-config-on-start = off

  jvm-exit-on-fatal-error = on

  actor {
    provider = cluster
    
    warn-about-java-serializer-usage = on
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    
    deployment {
      /ring_readonly_store {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
    
    debug {
      receive = off
      lifecycle = off
    }

    serializers {
      kvsproto = mws.kvs.Serializer
    }

    serialization-identifiers {
      "mws.kvs.Serializer" = 50
    }

    serialization-bindings {
      "mws.rng.ChangeState" = kvsproto
      "mws.rng.msg.BucketPut" = kvsproto
      "mws.rng.msg.BucketUpToDate" = kvsproto
      "mws.rng.msg.GetBucketIfNew" = kvsproto
      "mws.rng.msg.GetResp" = kvsproto
      "mws.rng.msg.NewerBucketData" = kvsproto
      "mws.rng.msg.StoreDelete" = kvsproto
      "mws.rng.msg.StoreGet" = kvsproto
      "mws.rng.msg.StorePut" = kvsproto
      "mws.rng.msg_dump.DumpBucketData" = kvsproto
      "mws.rng.msg_dump.DumpEn" = kvsproto
      "mws.rng.msg_dump.DumpGet" = kvsproto
      "mws.rng.msg_dump.DumpGetBucketData" = kvsproto
      "mws.rng.msg_dump.DumpPut" = kvsproto
      "mws.rng.store.package$Saved$" = kvsproto
    }
  }

  cluster {
    metrics.enabled = off
  }

  remote {
    netty.tcp {
      send-buffer-size = 30 megabytes
      receive-buffer-size = 30 megabytes
      maximum-frame-size = 30 megabytes
    }
  }
}
