#
# Defaults for the KVS database.
#
kvs {
  # KVS storage
  # Backend storage engine of KVS abstract scala types storage.
  # mem       - for memory
  # fs        - for file system
  # sql       - for SQL
  # leveldb   - for leveldb
  # rng       - for RNG distributed consistent hash storage
  store = mws.kvs.store.Ring
}

######################################
#  rng application config file       #
######################################

ring {
  quorum = [1, 1, 1] // N, W, R
  buckets = 1024
  virtual-nodes = 128
  hashLength = 32
  gather-timeout = 3
  leveldb {
    dir = "rng_data_"${akka.remote.netty.tcp.hostname}"_"${akka.remote.netty.tcp.port}
    fsync = false
  }
}

akka {
  loglevel = info
  loggers = [ akka.event.slf4j.Slf4jLogger ]
  logging-filter = akka.event.slf4j.Slf4jLoggingFilter
  logger-startup-timeout = 30s

  log-config-on-start = off

  jvm-exit-on-fatal-error = on

  actor {
    provider = cluster
    
    warn-about-java-serializer-usage = on
    enable-additional-serialization-bindings = on
    allow-java-serialization = on
    
    deployment {
      /ring_readonly_store {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
    
    debug {
      receive = off
      lifecycle = off
    }
  }

  cluster {
    metrics.enabled = off
  }

  serializers {
    kvs_proto = mws.kvs.Serializer
  }

  serialization-identifiers {
    mws.kvs.Serializer = 50
  }

  serialization-bindings {
    "mws.rng.msg.StoreGet" = kvs_proto
    "mws.rng.msg.StorePut" = kvs_proto
    "mws.rng.msg.StoreDelete" = kvs_proto
    "mws.rng.msg.BucketPut" = kvs_proto
    "mws.rng.msg.BucketGet" = kvs_proto
    "mws.rng.msg.GetResp" = kvs_proto
    "mws.rng.msg.PutSavingEntity" = kvs_proto
    "mws.rng.msg.GetSavingEntity" = kvs_proto
    "mws.rng.msg.BucketKeys" = kvs_proto
    "mws.rng.msg.GetBucketResp" = kvs_proto
    "mws.rng.msg.SavingEntity" = kvs_proto
  }
}
