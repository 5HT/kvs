#!/bin/bash

# ============== Akka Cluster Administration Tool ==============
#
# This script is meant to be used from within the Akka distribution.
#
# Add these options to the sbt or startup script:
#   java \
#      -Dcom.sun.management.jmxremote.port=9999 \
#      -Dcom.sun.management.jmxremote.ssl=false \
#      -Dcom.sun.management.jmxremote.authenticate=false \
#      ...
# ==============================================================

# FIXME support authentication? if so add: -Dcom.sun.management.jmxremote.password.file=<path to file> AND tweak this script to support it (arg need 'user:passwd' instead of '-')

declare AKKA_HOME="$(cd "$(cd "$(dirname "$0")"; pwd -P)"/..; pwd)"

SELF=`basename $0` # script name
HOST=$1            # cluster node to talk to through JMX
PORT=$2

shift 2

JMX_CLIENT="java -jar $AKKA_HOME/bin/jmxsh-R5.jar -h $HOST -p $PORT /dev/fd/0"

function invoke() {
  echo jmx_invoke -m akka:type=$1 "${@:2}" | $JMX_CLIENT
}

function get() {
  echo "puts [jmx_get -m akka:type=$1 \"$2\"]" | $JMX_CLIENT
}

function ensureNodeIsRunningAndAvailable {
    REPLY=$(get Cluster Available) # redirects STDERR to STDOUT before capturing it
    if [[ "$REPLY" != *true ]]; then
        echo "Akka cluster node is not available on $HOST, due to $REPLY"
        exit 1
    fi
}

# switch on command
case "$1" in

    put)
      if [ $# -ne 3 ]; then
        echo "Usage: $SELF <node-hostname> <jmx-port> put <key> <value>"
      fi

      ensureNodeIsRunningAndAvailable

      KEY=$2
      VALUE=$3
      invoke Store put $KEY $VALUE
      ;;

    get)
      if [ $# -ne 2 ]; then
        echo "Usage: $SELF <node-hostname> <jmx-port> get <key>"
      fi

      ensureNodeIsRunningAndAvailable

      KEY=$2
      invoke Store get $KEY
      ;;

    delete)
      if [ $# -ne 2 ]; then
        echo "Usage: $SELF <node-hostname> <jmx-port> delete <key>"
      fi

      ensureNodeIsRunningAndAvailable

      KEY=$2
      invoke Store delete $KEY
      ;;

    member-status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> member-status"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Querying member status for $HOST"
        get Cluster MemberStatus
        ;;

    cluster-status)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> cluster-status"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Querying cluster status"
        get Cluster ClusterStatus
        ;;

    members)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> members"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Querying members"
        get Cluster Members
        ;;

    unreachable)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> unreachable"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Querying unreachable members"
        get Cluster Unreachable
        ;;

    leader)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> leader"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Checking leader status"
        get Cluster Leader
        ;;

    is-singleton)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> is-singleton"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Checking for singleton cluster"
        get Cluster Singleton
        ;;

    is-available)
        if [ $# -ne 1 ]; then
            echo "Usage: $SELF <node-hostname> <jmx-port> is-available"
            exit 1
        fi

        ensureNodeIsRunningAndAvailable

        echo "Checking if member node on $HOST is AVAILABLE"
        get Cluster Available
        ;;

    *)
        printf "Usage: bin/$SELF <node-hostname> <jmx-port> <command> ...\n"
        printf "\n"
        printf "Supported commands are:\n"
        printf "\tCluster:\n"
        printf "%26s - %s\n" member-status       "Asks the member node for its current status"
        printf "%26s - %s\n" members             "Asks the cluster for addresses of current members"
        printf "%26s - %s\n" unreachable         "Asks the cluster for addresses of unreachable members"
        printf "%26s - %s\n" cluster-status      "Asks the cluster for its current status (member ring, unavailable nodes, meta data etc.)"
        printf "%26s - %s\n" leader              "Asks the cluster who the current leader is"
        printf "%26s - %s\n" is-singleton        "Checks if the cluster is a singleton cluster (single node cluster)"
        printf "%26s - %s\n" is-available        "Checks if the member node is available"
        printf "\n\tHash Ring:\n"
        printf "%26s - %s\n" "put <key> <value>" "Put key -> value"
        printf "%26s - %s\n" "get <key>"         "Get value for key"
        printf "%26s - %s\n" "delete <key>"      "Delete value by key"
        printf "\n"
        printf "Where the <node-url> should be on the format of 'akka.tcp://actor-system-name@hostname:port'\n"
        printf "\n"
        printf "Examples: bin/$SELF localhost 9998 is-available\n"
        printf "          bin/$SELF localhost 9998 cluster-status\n"
        exit 1
        ;;
esac
